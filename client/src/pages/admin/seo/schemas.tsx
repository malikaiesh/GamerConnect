import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Eye, Edit, Trash2, RefreshCw, Plus, Code, Download, Upload, Zap, Check, X, AlertTriangle } from "lucide-react";
import { formatDistanceToNow } from "date-fns";
import AdminNavigation from "@/components/admin/navigation";
import NotificationBell from "@/components/admin/notification-bell";
import AdminProfile from "@/components/admin/admin-profile";

interface SeoSchema {
  id: number;
  schemaType: string;
  contentType: string;
  contentId: number | null;
  name: string;
  schemaData: Record<string, any>;
  isActive: boolean;
  isAutoGenerated: boolean;
  lastValidated: Date | null;
  validationErrors: string[] | null;
  priority: number;
  createdAt: Date;
  updatedAt: Date;
}

function SeoSchemasContent() {
  const [page, setPage] = useState(1);
  const [contentTypeFilter, setContentTypeFilter] = useState<string>("all");
  const [selectedSchema, setSelectedSchema] = useState<SeoSchema | null>(null);
  const [editingSchema, setEditingSchema] = useState<SeoSchema | null>(null);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [createModalOpen, setCreateModalOpen] = useState(false);
  const [bulkGenerateModalOpen, setBulkGenerateModalOpen] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch schemas with pagination
  const { data: schemasData, isLoading } = useQuery({
    queryKey: ["/api/admin/seo-schemas", page, contentTypeFilter],
    queryFn: () => apiRequest(`/api/admin/seo-schemas?page=${page}&limit=20${contentTypeFilter && contentTypeFilter !== 'all' ? `&contentType=${contentTypeFilter}` : ""}`),
  });

  // Delete schema mutation
  const deleteSchema = useMutation({
    mutationFn: (id: number) => apiRequest(`/api/admin/seo-schemas/${id}`, { method: "DELETE" }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/seo-schemas"] });
      toast({ title: "Success", description: "Schema deleted successfully" });
    },
    onError: () => {
      toast({ title: "Error", description: "Failed to delete schema", variant: "destructive" });
    }
  });

  // Update schema mutation
  const updateSchema = useMutation({
    mutationFn: ({ id, data }: { id: number; data: any }) => 
      apiRequest(`/api/admin/seo-schemas/${id}`, { method: "PUT", body: data }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/seo-schemas"] });
      setEditModalOpen(false);
      setEditingSchema(null);
      toast({ title: "Success", description: "Schema updated successfully" });
    },
    onError: () => {
      toast({ title: "Error", description: "Failed to update schema", variant: "destructive" });
    }
  });

  // Create schema mutation
  const createSchema = useMutation({
    mutationFn: (data: any) => apiRequest("/api/admin/seo-schemas", { method: "POST", body: data }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/seo-schemas"] });
      setCreateModalOpen(false);
      toast({ title: "Success", description: "Schema created successfully" });
    },
    onError: () => {
      toast({ title: "Error", description: "Failed to create schema", variant: "destructive" });
    }
  });

  // Regenerate schema mutation
  const regenerateSchema = useMutation({
    mutationFn: (id: number) => apiRequest(`/api/admin/seo-schemas/${id}/regenerate`, { method: "POST" }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/seo-schemas"] });
      toast({ title: "Success", description: "Schema regenerated successfully" });
    },
    onError: () => {
      toast({ title: "Error", description: "Failed to regenerate schema", variant: "destructive" });
    }
  });

  // Bulk generate schemas mutation
  const bulkGenerateSchemas = useMutation({
    mutationFn: (contentType: string) => 
      apiRequest("/api/admin/seo-schemas/bulk-generate", { method: "POST", body: { contentType } }),
    onSuccess: (result) => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/seo-schemas"] });
      setBulkGenerateModalOpen(false);
      toast({ 
        title: "Bulk Generation Complete", 
        description: `Created: ${result.summary.created}, Existing: ${result.summary.existing}, Errors: ${result.summary.errors}`
      });
    },
    onError: () => {
      toast({ title: "Error", description: "Failed to bulk generate schemas", variant: "destructive" });
    }
  });

  const handleEdit = (schema: SeoSchema) => {
    setEditingSchema(schema);
    setEditModalOpen(true);
  };

  const handleView = (schema: SeoSchema) => {
    setSelectedSchema(schema);
    setViewModalOpen(true);
  };

  const handleSaveEdit = () => {
    if (!editingSchema) return;
    
    updateSchema.mutate({
      id: editingSchema.id,
      data: {
        name: editingSchema.name,
        schemaData: editingSchema.schemaData,
        isActive: editingSchema.isActive,
        priority: editingSchema.priority
      }
    });
  };

  const getStatusBadge = (schema: SeoSchema) => {
    if (!schema.isActive) {
      return <Badge variant="secondary" data-testid={`status-inactive-${schema.id}`}>Inactive</Badge>;
    }
    
    if (schema.validationErrors && schema.validationErrors.length > 0) {
      return <Badge variant="destructive" data-testid={`status-error-${schema.id}`}>Error</Badge>;
    }
    
    return <Badge variant="default" data-testid={`status-active-${schema.id}`}>Active</Badge>;
  };

  const getSchemaTypeIcon = (schemaType: string) => {
    switch (schemaType) {
      case "VideoGame": return "üéÆ";
      case "BlogPosting":
      case "Article": return "üìù";
      case "WebPage": return "üìÑ";
      case "Organization": return "üè¢";
      case "CollectionPage": return "üìö";
      default: return "üìã";
    }
  };

  if (isLoading) {
    return (
      <div className="p-6">
        <div className="flex justify-center items-center h-32">
          <RefreshCw className="h-6 w-6 animate-spin" />
          <span className="ml-2">Loading schemas...</span>
        </div>
      </div>
    );
  }

  const schemas = schemasData?.schemas || [];
  const total = schemasData?.total || 0;
  const totalPages = Math.ceil(total / 20);

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold" data-testid="page-title">SEO Schema Management</h1>
          <p className="text-muted-foreground" data-testid="page-description">
            Manage automatic SEO schema generation for games, blog posts, pages, and categories
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={() => setBulkGenerateModalOpen(true)}
            data-testid="button-bulk-generate"
          >
            <Zap className="h-4 w-4 mr-2" />
            Bulk Generate
          </Button>
          <Button onClick={() => setCreateModalOpen(true)} data-testid="button-create-schema">
            <Plus className="h-4 w-4 mr-2" />
            Create Schema
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Schemas</CardTitle>
            <Code className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold" data-testid="stat-total">{total}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Schemas</CardTitle>
            <Check className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600" data-testid="stat-active">
              {schemas.filter(s => s.isActive).length}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Auto-Generated</CardTitle>
            <Zap className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600" data-testid="stat-auto-generated">
              {schemas.filter(s => s.isAutoGenerated).length}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">With Errors</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600" data-testid="stat-errors">
              {schemas.filter(s => s.validationErrors && s.validationErrors.length > 0).length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <div className="flex gap-4 items-center">
        <Select value={contentTypeFilter} onValueChange={setContentTypeFilter}>
          <SelectTrigger className="w-48" data-testid="filter-content-type">
            <SelectValue placeholder="Filter by content type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Content Types</SelectItem>
            <SelectItem value="game">Games</SelectItem>
            <SelectItem value="blog_post">Blog Posts</SelectItem>
            <SelectItem value="page">Pages</SelectItem>
            <SelectItem value="category">Categories</SelectItem>
            <SelectItem value="organization">Organization</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Schemas Table */}
      <Card>
        <CardHeader>
          <CardTitle>Schema Library</CardTitle>
          <CardDescription>View and manage all SEO schemas</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Schema</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Content</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Last Updated</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {schemas.map((schema) => (
                <TableRow key={schema.id} data-testid={`schema-row-${schema.id}`}>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{getSchemaTypeIcon(schema.schemaType)}</span>
                      <div>
                        <div className="font-medium" data-testid={`schema-name-${schema.id}`}>
                          {schema.name}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {schema.isAutoGenerated && <Badge variant="outline" className="text-xs">Auto</Badge>}
                        </div>
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" data-testid={`schema-type-${schema.id}`}>
                      {schema.schemaType}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="secondary" data-testid={`content-type-${schema.id}`}>
                      {schema.contentType}
                    </Badge>
                  </TableCell>
                  <TableCell>{getStatusBadge(schema)}</TableCell>
                  <TableCell data-testid={`last-updated-${schema.id}`}>
                    {formatDistanceToNow(new Date(schema.updatedAt), { addSuffix: true })}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleView(schema)}
                        data-testid={`button-view-${schema.id}`}
                      >
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit(schema)}
                        data-testid={`button-edit-${schema.id}`}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      {schema.isAutoGenerated && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => regenerateSchema.mutate(schema.id)}
                          disabled={regenerateSchema.isPending}
                          data-testid={`button-regenerate-${schema.id}`}
                        >
                          <RefreshCw className={`h-4 w-4 ${regenerateSchema.isPending ? 'animate-spin' : ''}`} />
                        </Button>
                      )}
                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => deleteSchema.mutate(schema.id)}
                        disabled={deleteSchema.isPending}
                        data-testid={`button-delete-${schema.id}`}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex justify-center gap-2 mt-6">
              <Button
                variant="outline"
                onClick={() => setPage(p => Math.max(1, p - 1))}
                disabled={page === 1}
                data-testid="button-prev-page"
              >
                Previous
              </Button>
              <span className="flex items-center px-3" data-testid="pagination-info">
                Page {page} of {totalPages}
              </span>
              <Button
                variant="outline"
                onClick={() => setPage(p => Math.min(totalPages, p + 1))}
                disabled={page === totalPages}
                data-testid="button-next-page"
              >
                Next
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* View Schema Modal */}
      <Dialog open={viewModalOpen} onOpenChange={setViewModalOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle data-testid="view-modal-title">
              {selectedSchema?.name}
            </DialogTitle>
            <DialogDescription>
              View JSON-LD schema markup
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <pre className="bg-muted p-4 rounded-lg overflow-x-auto text-sm" data-testid="schema-json">
              {JSON.stringify(selectedSchema?.schemaData, null, 2)}
            </pre>
          </div>
        </DialogContent>
      </Dialog>

      {/* Edit Schema Modal */}
      <Dialog open={editModalOpen} onOpenChange={setEditModalOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle data-testid="edit-modal-title">Edit Schema</DialogTitle>
            <DialogDescription>
              Modify schema details and JSON-LD markup
            </DialogDescription>
          </DialogHeader>
          {editingSchema && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="schema-name">Name</Label>
                <Input
                  id="schema-name"
                  value={editingSchema.name}
                  onChange={(e) => setEditingSchema({ ...editingSchema, name: e.target.value })}
                  data-testid="input-schema-name"
                />
              </div>
              <div>
                <Label htmlFor="schema-priority">Priority</Label>
                <Input
                  id="schema-priority"
                  type="number"
                  value={editingSchema.priority}
                  onChange={(e) => setEditingSchema({ ...editingSchema, priority: parseInt(e.target.value) })}
                  data-testid="input-schema-priority"
                />
              </div>
              <div>
                <Label htmlFor="schema-json">JSON-LD Schema</Label>
                <Textarea
                  id="schema-json"
                  rows={15}
                  value={JSON.stringify(editingSchema.schemaData, null, 2)}
                  onChange={(e) => {
                    try {
                      const parsed = JSON.parse(e.target.value);
                      setEditingSchema({ ...editingSchema, schemaData: parsed });
                    } catch {
                      // Invalid JSON, don't update
                    }
                  }}
                  className="font-mono text-sm"
                  data-testid="textarea-schema-json"
                />
              </div>
              <div className="flex gap-2">
                <Button onClick={handleSaveEdit} disabled={updateSchema.isPending} data-testid="button-save-edit">
                  {updateSchema.isPending ? "Saving..." : "Save Changes"}
                </Button>
                <Button variant="outline" onClick={() => setEditModalOpen(false)} data-testid="button-cancel-edit">
                  Cancel
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Bulk Generate Modal */}
      <Dialog open={bulkGenerateModalOpen} onOpenChange={setBulkGenerateModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle data-testid="bulk-modal-title">Bulk Generate Schemas</DialogTitle>
            <DialogDescription>
              Automatically generate schemas for all content of a specific type
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-2">
              {["game", "blog_post", "page", "category"].map((type) => (
                <Button
                  key={type}
                  variant="outline"
                  onClick={() => bulkGenerateSchemas.mutate(type)}
                  disabled={bulkGenerateSchemas.isPending}
                  data-testid={`button-bulk-${type}`}
                >
                  <Zap className="h-4 w-4 mr-2" />
                  {type.replace("_", " ").replace(/\b\w/g, l => l.toUpperCase())}
                </Button>
              ))}
            </div>
            {bulkGenerateSchemas.isPending && (
              <div className="flex items-center justify-center py-4">
                <RefreshCw className="h-6 w-6 animate-spin mr-2" />
                <span>Generating schemas...</span>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default function SeoSchemasPage() {
  return (
    <div className="flex min-h-screen bg-background">
      <AdminNavigation />
      <div className="flex-1">
        {/* Page Header */}
        <div className="border-b border-border bg-card px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">SEO Schema Management</h1>
              <p className="text-muted-foreground">Manage automatic SEO schema generation for games, blog posts, pages, and categories</p>
            </div>
            <div className="flex items-center gap-3">
              <NotificationBell />
              <AdminProfile />
            </div>
          </div>
        </div>
        
        <div className="p-6 lg:p-10">
          <SeoSchemasContent />
        </div>
      </div>
    </div>
  );
}